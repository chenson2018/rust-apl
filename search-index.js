var searchIndex = JSON.parse('{\
"rust_apl":{"doc":"This crate provides an interpreter for the language APL","t":[0,0,0,0,0,0,0,0,0,0,3,3,4,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,3,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,0,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,12,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,11],"n":["apl_type","environment","err","expr","interpreter","parser","primitives","run","scanner","token","AplArray","AplEnclose","AplType","Array","Enclose","Name","Null","Number","Scalar","Scalar","String","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","extract_f64","extract_scalar","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","scalar_dyadic","scalar_monadic","shape","shape","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","values","values","0","0","0","0","0","0","Environment","assign","borrow","borrow_mut","clone","clone_into","contains","default","define","enclosing","extend","fmt","from","get","into","new","to_owned","try_from","try_into","type_id","values","with_enclosing","AplError","borrow","borrow_mut","cause","description","err","fmt","fmt","from","into","line","lower","new","to_string","try_from","try_into","type_id","with_lower","Array","Dyadic","Enclose","Expr","Grouping","Literal","Monadic","Variable","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","0","0","0","0","0","0","0","1","1","2","Interpreter","borrow","borrow_mut","clone","clone_into","default","env","evaluate","from","interpret","into","new","to_owned","try_from","try_into","type_id","Parser","advance","at_end","borrow","borrow_mut","check","consume","current","dyadic","expression","from","into","match_t","new","parse","peek","previous","primary","tokens","try_from","try_into","type_id","dyadic","monadic","minus","plus","reshape","enclose","negate","shape","run","Scanner","add","add_token","advance","borrow","borrow_mut","clone","clone_into","current","fmt","from","identifier","into","is_end","line","new","number","peek","peek_next","scan","scan_token","source","start","string","to_owned","tokens","try_from","try_into","type_id","Alpha","Ampersand","And","At","Backslash","BackslashBar","Circle","CircleBar","CircleDiaeresis","CircleStile","Comma","CommaBar","Del","Diaeresis","Diamond","Divide","Domino","Dot","DownArrow","DownShoe","DownTack","Downstile","Eof","Epsilon","EpsilonUnderbar","Equal","EqualUnderbar","EqualUnderbarSlash","ExclamationMark","GradeDown","GradeUp","GreaterThan","GreaterThanEqual","HighMinus","Hydrant","Ibeam","Identifier","Iota","IotaUnderbar","Jot","JotDiaeresis","Lamp","LeftArrow","LeftBrace","LeftParenthesis","LeftShoe","LeftShoeUnderbar","LeftTack","LessThan","LessThanEqual","Log","Minus","Nand","Newline","Nor","NotEqual","Number","Omega","Or","Plus","Quad","QuadColon","QuadDiamond","QuadEqual","QuestionMark","QuoteQuad","Rho","RightArrow","RightBrace","RightParenthesis","RightShoe","RightTack","Slash","SlashBar","Squad","Star","StarDiaeresis","Stile","String","Thorn","Tilde","TildeDiaeresis","Token","TokenType","Transpose","UpArrow","UpShoe","UpTack","Upstile","Zilde","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","lexeme","line","literal","to_owned","to_owned","token","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rust_apl","","","","","","","","","","rust_apl::apl_type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_apl::apl_type::AplType","","","","rust_apl::apl_type::Scalar","","rust_apl::environment","","","","","","","","","","","","","","","","","","","","","","rust_apl::err","","","","","","","","","","","","","","","","","","rust_apl::expr","","","","","","","","","","","","","","","","","","","","","rust_apl::expr::Expr","","","","","","","","","","rust_apl::interpreter","","","","","","","","","","","","","","","","rust_apl::parser","","","","","","","","","","","","","","","","","","","","","","rust_apl::primitives","","rust_apl::primitives::dyadic","","","rust_apl::primitives::monadic","","","rust_apl::run","rust_apl::scanner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_apl::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","A struct representing a parser. This operates much like …","return the current <code>Token</code> and advance the parser one token","check if all tokens have been parsed","","","check if the current <code>Token</code> has the specified <code>TokenType</code>","advance the parser a <code>Token</code> with the specified <code>TokenType</code> is …","index of self.tokens that the parser is examining","parse a dyadic expression, i.e an expression with a …","parse an expression into an expr::Expr","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","if the current token matches any of <code>types</code>, advance the …","initialize a new parser","parse <code>self.tokens</code> into an expr::Expr","return the current Token without advancing the scanner","return the previous Token without advancing the scanner","loop, parsing literals (string, number, variable) or …","vector of tokens, as received by a Scanner","","","","","","","","","","","","Given an Interpreter, evaluate a given string.","A struct representing a scanner. Note the difference …","add a non-literal token to <code>self.tokens</code>","add a literal token (string, number, or identifier) to …","return the current character and advance the scanner one …","","","","","index of <code>self.source</code> that the scanner is examining","","Returns the argument unchanged.","scan an identifier","Calls <code>U::from(self)</code>.","check if all characters have been scanned","current line number the scanner is examining","initialize a new scanner","scan a number","return the current character without advancing the scanner","return the following character without advancing the …","scan tokens until past all of <code>self.tokens</code>","scan a single token","raw character input of an APL program","starting index before scanner gets next token","scan a string","","resulting tokens after scanning <code>self.source</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An enum for representing the allowed tokens in APL.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,0,1,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,0,0,1,1,2,2,3,4,1,2,3,3,4,1,2,3,4,1,1,3,4,1,2,3,4,1,2,1,2,3,4,1,2,3,4,1,2,3,4,3,4,5,6,7,8,9,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,15,16,17,18,19,20,15,16,15,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,24,24,24,24,24,24,25,24,25,24,25,24,25,24,24,25,24,25,24,25,24,25,25,25,25,24,25,25,24,25,24,25,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["apltype",4]],[[["",0]],["scalar",4]],[[["",0]],["aplarray",3]],[[["",0]],["aplenclose",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["apltype",4]],["bool",0]],[[["",0],["scalar",4]],["bool",0]],[[["vec",3,[["scalar",4]]]],["vec",3,[["f64",0]]]],[[["apltype",4]],["scalar",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["arraybase",3,[["ownedrepr",3,[["f64",0]]],["dim",3,[["ixdynimpl",3]]]]]]],[[]],[[]],[[]],[[]],[[]],[[["apltype",4],["fn",8]],["result",4,[["apltype",4],["str",0]]]],[[["fn",8]],["result",4,[["apltype",4],["str",0]]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0],["str",0],["apltype",4]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["environment",3]],[[["",0],["",0]]],[[["",0],["str",0]],["bool",0]],[[]],[[["",0],["str",0],["apltype",4]]],null,[[["",0],["environment",3]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["str",0]],["option",4,[["apltype",4]]]],[[]],[[],["environment",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["box",3,[["environment",3]]]],["environment",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["str",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,null,[[["string",3],["usize",0]],["aplerror",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["string",3],["usize",0],["error",3]],["aplerror",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["expr",4]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["interpreter",3]],[[["",0],["",0]]],[[]],null,[[["",0],["expr",4]],["result",4,[["apltype",4],["aplerror",3]]]],[[]],[[["",0],["expr",4]],["result",4,[["apltype",4],["aplerror",3]]]],[[]],[[],["interpreter",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["token",3]],[[["",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["tokentype",4]],["bool",0]],[[["",0],["tokentype",4],["string",3]],["result",4,[["token",3],["aplerror",3]]]],null,[[["",0]],["result",4,[["expr",4],["aplerror",3]]]],[[["",0]],["result",4,[["expr",4],["aplerror",3]]]],[[]],[[]],[[["",0],["vec",3,[["tokentype",4]]]],["bool",0]],[[["vec",3,[["token",3]]]],["parser",3]],[[["",0]],["result",4,[["expr",4],["aplerror",3]]]],[[["",0]],["token",3]],[[["",0]],["token",3]],[[["",0]],["result",4,[["expr",4],["aplerror",3]]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["apltype",4],["apltype",4]],["result",4,[["apltype",4],["str",0]]]],[[["apltype",4],["apltype",4]],["result",4,[["apltype",4],["str",0]]]],[[["apltype",4],["apltype",4]],["result",4,[["apltype",4],["str",0]]]],[[["apltype",4]],["result",4,[["apltype",4],["str",0]]]],[[["apltype",4]],["result",4,[["apltype",4],["str",0]]]],[[["apltype",4]],["result",4,[["apltype",4],["str",0]]]],[[["string",3],["interpreter",3],["bool",0]],["result",4,[["apltype",4],["vec",3,[["aplerror",3]]]]]],null,[[["",0],["tokentype",4]]],[[["",0],["tokentype",4],["apltype",4]]],[[["",0]],["char",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["scanner",3]],[[["",0],["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],[[]],[[["",0]],["bool",0]],null,[[["string",3]],["scanner",3]],[[["",0],["f64",0]],["result",4,[["aplerror",3]]]],[[["",0]],["char",0]],[[["",0]],["char",0]],[[["",0]],["result",4,[["vec",3,[["aplerror",3]]]]]],[[["",0]],["result",4,[["vec",3,[["aplerror",3]]]]]],null,null,[[["",0]],["result",4,[["aplerror",3]]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",3]],[[["",0]],["tokentype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["tokentype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,[[["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"AplType"],[4,"Scalar"],[3,"AplArray"],[3,"AplEnclose"],[13,"Scalar"],[13,"Name"],[13,"Array"],[13,"Enclose"],[13,"Number"],[13,"String"],[3,"Environment"],[3,"AplError"],[4,"Expr"],[13,"Grouping"],[13,"Dyadic"],[13,"Monadic"],[13,"Literal"],[13,"Variable"],[13,"Enclose"],[13,"Array"],[3,"Interpreter"],[3,"Parser"],[3,"Scanner"],[4,"TokenType"],[3,"Token"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};